package Automation;

import org.openqa.selenium.By;
import org.testng.Assert;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;


public class LoginTests extends BaseTest {

    private static final String WrongPassAlert = "Wrong password.";
    private static final String UserDoesNotExistAlert = "User does not exist.";
    private static final String FillRequiredAlert = "Please fill out Username and Password.";

    // Data for Negative/Edge Tests
    private final String noUSer = "noUSerHEeeeeeeeeeeeere";
    private final String wrongPassTest = "noUSerHEeeeeeeeeeeeere";
    


  
    @BeforeClass
    public void createTestUser() {
        driver.get(BASE_URL);
        authPage.clickSignupLink();
        authPage.performSignup(testUsername, ValidPassword);
        String alertText = authPage.handleAlertAndGetText();
        Assert.assertEquals(alertText, "Sign up successful.");
    }

    
    @Test(priority = 14, description = "TC014: Verify Successful Login")
    public void tc014_SuccessfulLogin() {
        authPage.clickLoginLink();
        authPage.performLogin(testUsername, ValidPassword);
        String WelcomeMessage = "Welcome " + testUsername;
        Assert.assertEquals(authPage.getWelcomeMessage(), WelcomeMessage);
        authPage.clickLogout();
    }

    @Test(priority = 15, description = "TC015:Verify Login with Invalid password")
    public void tc015_InvalidPassword() {
        authPage.clickLoginLink();
        authPage.performLogin(testUsername, WrongPassAlert);
        String alertText = authPage.handleAlertAndGetText();
        Assert.assertEquals(alertText, WrongPassAlert);
      
    }

    @Test(priority = 16, description = "TC016:Verify Login with Invalid password")
    public void tc016_NonExistingUser() {
        authPage.clickLoginLink();
        authPage.performLogin(noUSer, ValidPassword);
        String alertText = authPage.handleAlertAndGetText();
        Assert.assertEquals(alertText, UserDoesNotExistAlert);
    }
    
    

    @Test(priority = 17, description = "TC017:Verify Login with Invalid password")
    public void tc017_BlankFields() {
        authPage.clickLoginLink();
        authPage.performLogin("", "");
        String alertText = authPage.handleAlertAndGetText();
        Assert.assertEquals(alertText, FillRequiredAlert);
    }

    
    
    @Test(priority = 18, description = "TC018:Verify Password Case-Sensitivity")
    public void tc018_CaseSensitivity() {
       
        authPage.clickLoginLink();
        String LowerCasePass = ValidPassword.toLowerCase();
        authPage.performLogin(testUsername, LowerCasePass);
        String alertText = authPage.handleAlertAndGetText();
        Assert.assertEquals(alertText, WrongPassAlert);
    }
    
    
    
    @Test(priority = 19, description = "TC019:Verify Login with leading/trailing spaces in fields")
    public void tc019_LeadingTrailingSpaces() {
        String SpacedUsername = "  " + testUsername + "  ";
        authPage.clickLoginLink();
        authPage.performLogin(SpacedUsername, ValidPassword);
        String alertText = authPage.handleAlertAndGetText();
        Assert.assertEquals(alertText, UserDoesNotExistAlert);        
    }
    
    
    
    @Test(priority = 20, description = "Verify Login attempts lock-out ")
    public void tc020_AccountLockout() {
      
        
        authPage.clickLoginLink();
        
        for (int NumberOfAttempts = 1; NumberOfAttempts <= 5; NumberOfAttempts++) {
            authPage.performLogin(testUsername, wrongPassTest);
            String alertText = authPage.handleAlertAndGetText();
            Assert.assertEquals(alertText, WrongPassAlert);
            if (NumberOfAttempts < 5) authPage.clickLoginLink();
        }

        authPage.clickLoginLink();  
        authPage.performLogin(testUsername, ValidPassword);
        String alertText = authPage.handleAlertAndGetText();
        Assert.assertEquals(alertText, "Your account Locked ");

        
    }
    
    
    
    
    @Test(priority = 21, description = "TC021:Verify cannot access logged-in features after logout"
    		+ "")
    public void tc021_SessionTerminationOnLogout() {
        authPage.clickLoginLink();
        authPage.performLogin(testUsername, ValidPassword);
        authPage.getWelcomeMessage(); 
        authPage.clickLogout();

        Assert.assertFalse(authPage.isUserLoggedIn());
    }
    
    @Test(priority = 22, description = "TC022:Verify multiple login/logout cycles")
    public void tc022_MultipleCycles() {
        final int CYCLES = 6;
        
        for (int Attempts = 1; Attempts <= CYCLES; Attempts++) {
            // 1. Login
            authPage.clickLoginLink();
            authPage.performLogin(testUsername, ValidPassword);
            Assert.assertTrue(authPage.isUserLoggedIn());
            
            authPage.clickLogout();
            Assert.assertFalse(authPage.isUserLoggedIn());
            
            System.out.println("TC022 Cycle " + Attempts + " completed successfully.");
        }
    }
    
    @Test(priority = 23, description = "TC023:Verify Password Masking")
    public void tc023_MaskingPassword() {
        authPage.clickLoginLink(); 
        
        String actualType = driver.findElement(By.id("loginpassword")).getAttribute("type");
        String expectedType = "password";
        
        Assert.assertEquals(actualType, expectedType);
        
    
        By loginCloseButton = By.xpath("//*[@id=\"logInModal\"]/div/div/div[3]/button[1]");
        driver.findElement(loginCloseButton).click();
        
    
    }
}
