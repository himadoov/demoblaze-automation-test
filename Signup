package Automation;

import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.testng.Assert;
import org.testng.SkipException;
import org.testng.annotations.Test;


public class Signup extends BaseTest {

    
    private final String SuccessSignUpMessage="Sign up successful.";
    private final String UsreExsistMessage = "This user already exist.";
    private final String RequiredAlret = "Please fill out Username and Password."; 
    
    private final String ShortUser = "a"; 
    private final String LongUser = "asdasdasdasderhngshdfgiohsdioghjdiofghjiosdfghjfhgjyhjghjhgjifh"; 
    private final String LoweCaseUserName = "himadoov";
    private final String SpecialCharUser = "!@#$%^&*()";
    private final String MixedUserName = "MixedUserName";
    private final String SpacesUserName = "Spaces User Name";

    
    private void navigateToSignup() {
        authPage.clickSignupLink();
    }
    private void cleanupModal() {
    	if (authPage.isSignupModalOpen()) {
            authPage.closeSignupModal();
        }
        //Assert.assertFalse(authPage.isUserLoggedIn(), "Cleanup Check: No user should be logged in after this test.");
    }
    
 
    
   
    
    @Test(priority = 1, description = "TC1:Verify Successful Sign Up" , enabled = true  )
    public void tc01_SuccessfulSignup() {
        navigateToSignup(); 
        authPage.performSignup(testUsername, ValidPassword);
        String alertText = authPage.handleAlertAndGetText();
        Assert.assertEquals(alertText, SuccessSignUpMessage);
        driver.navigate().refresh();

    }
    
    

   
    @Test(priority = 2, description = "TC2: Verify Sign Up with existing username", enabled = true)
    public void tc02_DuplicateUserSignup() {
        navigateToSignup();
        authPage.performSignup(testUsername, ValidPassword);
        String alertText = authPage.handleAlertAndGetText();
        Assert.assertEquals(alertText, UsreExsistMessage);
        driver.navigate().refresh();
    }
    
    

    @Test(priority = 3, description = "TC3:Verify Sign Up with blank username", enabled = true)
    public void tc03_EmptyUsername() {
        navigateToSignup();
        
        authPage.performSignup("", ValidPassword);
        String alertText = authPage.handleAlertAndGetText();
        
        Assert.assertEquals(alertText, RequiredAlret);
        driver.navigate().refresh();   
        
    }
    
    
    

    @Test(priority = 4, description = "TC4:Verify Sign Up with blank password", enabled = true)
    public void tc04_EmptyPassword() {
        navigateToSignup();
        authPage.performSignup(testUsername, "");
        String alertText = authPage.handleAlertAndGetText();
        Assert.assertEquals(alertText, RequiredAlret);
        driver.navigate().refresh();   

    }
    
    

    @Test(priority = 5, description = "TC5: Verify Sign Up with under min length",enabled = true)
    public void tc05_UserMinLength() {
        navigateToSignup();
        authPage.performSignup(ShortUser, ValidPassword);
        String alertText = authPage.handleAlertAndGetText();
        if(!RequiredAlret.equals(alertText)) {
            driver.navigate().refresh();
            throw new SkipException("Skipping TC5 due to app bug: unexpected alert text.");
        }
        System.out.println("TC passed");
        
        driver.navigate().refresh();   
    }
    
    

    @Test(priority = 6, description = "TC6:Verify Sign Up with over max length",enabled = true)
    public void tc06_OverMaxUser() {
        navigateToSignup();
        authPage.performSignup(LongUser, ValidPassword);
        String alertText = authPage.handleAlertAndGetText();
        
        
        if(!RequiredAlret.equals(alertText)) {
            driver.navigate().refresh();
            throw new SkipException("Skipping TC6 due to app bug: unexpected alert text.");
        }
        System.out.println("TC passed");
        driver.navigate().refresh();    
        
    }
    
    

    @Test(priority = 7, description = "TC7: Verify Sign Up with special characters.", enabled=true )
    public void tc07_specialCharactersUser() {
        navigateToSignup();
        authPage.performSignup(SpecialCharUser, ValidPassword);
        
        String alertText = authPage.handleAlertAndGetText();
        
        if(!RequiredAlret.equals(alertText)) {
            driver.navigate().refresh();
            throw new SkipException("Skipping TC7 due to app bug: unexpected alert text.");
        }
        
        System.out.println("TC passed");
        driver.navigate().refresh();
    }


    @Test(priority = 8, description = "TC8: Verify Sign Up with leading/trailing spaces",enabled = true)
    public void tc08_SpacesUserName() {
        navigateToSignup();  
        authPage.performSignup(SpacesUserName, ValidPassword);
        String alertText = authPage.handleAlertAndGetText();
        if(!RequiredAlret.equals(alertText)) {
            driver.navigate().refresh();
            throw new SkipException("Skipping TC8 due to app bug: unexpected alert text.");
        }
        
        System.out.println("TC passed");
        driver.navigate().refresh();
    }

    
    
    @Test(priority = 9, description = "TC9: Verify Sign Up with all lowercase characters", enabled = true)
    public void tc09_LoweCaseUserName() {
        navigateToSignup();
        String LowerCaseUser=testUsername.toLowerCase()+System.currentTimeMillis()+"s";
        authPage.performSignup(LowerCaseUser, ValidPassword);
        String alertText = authPage.handleAlertAndGetText();
        Assert.assertEquals(alertText, SuccessSignUpMessage);
        driver.navigate().refresh();
    }


    @Test(priority = 10, description = "TC10:Verify Sign Up with mixed case characters", enabled = true)
    public void tc10_MixedUserName() {
        navigateToSignup();
        String MixedUserName=testUsername+System.currentTimeMillis();
        authPage.performSignup(MixedUserName, ValidPassword);
        String alertText = authPage.handleAlertAndGetText();
        Assert.assertEquals(alertText, SuccessSignUpMessage);
        driver.navigate().refresh();
    }

    
    @Test(priority = 11, description = "TC11: Verify Password Masking", enabled = true)
    public void tc11_MaskingPassword() {
        navigateToSignup();
        WebElement passwordField = driver.findElement(By.id("sign-password"));
        String fieldType = passwordField.getAttribute("type");
        Assert.assertEquals(fieldType, "password");
        driver.navigate().refresh();
        
      
    }

    @Test(priority = 12, description = "Verify 'X' button closes the dialog", enabled = true)
    public void tc12_XButtonCloses() {
        navigateToSignup();
        By closeButton = By.xpath("//*[@id=\"signInModal\"]/div/div/div[1]/button/span");
        driver.findElement(closeButton).click();
		boolean isModalClosed = driver.findElements(By.id("signInModal")).isEmpty();
		Assert.assertFalse(isModalClosed);
		driver.navigate().refresh();
    }
    
    


    @Test(priority = 13, description = "TC13: Verify 'Close' button closes the dialog", enabled = true)
    public void tc13_ConsecutiveFlowTest() {
        
        navigateToSignup();
        By closeButton = By.xpath("//*[@id=\"signInModal\"]/div/div/div[3]/button[1]");
        By signupModal = By.id("signInModal");
        driver.findElement(closeButton).click();
        boolean isModalClosed = driver.findElements(signupModal).isEmpty();
        Assert.assertFalse(isModalClosed, "Modal should be closed after clicking Close button.");
		driver.navigate().refresh();
    }
  //  public static void name(String[] args) {
    //	tc01_SuccessfulSignup();
	//}
}
